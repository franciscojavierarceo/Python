"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import feast.core.Feature_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class FeatureViewProjection(google.protobuf.message.Message):
    """A projection to be applied on top of a FeatureView. 
    Contains the modifications to a FeatureView such as the features subset to use.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class JoinKeyMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    FEATURE_VIEW_NAME_FIELD_NUMBER: builtins.int
    FEATURE_VIEW_NAME_ALIAS_FIELD_NUMBER: builtins.int
    FEATURE_COLUMNS_FIELD_NUMBER: builtins.int
    JOIN_KEY_MAP_FIELD_NUMBER: builtins.int
    feature_view_name: typing.Text = ...
    """The feature view name"""

    feature_view_name_alias: typing.Text = ...
    """Alias for feature view name"""

    @property
    def feature_columns(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[feast.core.Feature_pb2.FeatureSpecV2]:
        """The features of the feature view that are a part of the feature reference."""
        pass
    @property
    def join_key_map(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Map for entity join_key overrides of feature data entity join_key to entity data join_key"""
        pass
    def __init__(self,
        *,
        feature_view_name : typing.Text = ...,
        feature_view_name_alias : typing.Text = ...,
        feature_columns : typing.Optional[typing.Iterable[feast.core.Feature_pb2.FeatureSpecV2]] = ...,
        join_key_map : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["feature_columns",b"feature_columns","feature_view_name",b"feature_view_name","feature_view_name_alias",b"feature_view_name_alias","join_key_map",b"join_key_map"]) -> None: ...
global___FeatureViewProjection = FeatureViewProjection
