"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import feast.core.DataSource_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class SavedDatasetSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class TagsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...
        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    FEATURES_FIELD_NUMBER: builtins.int
    JOIN_KEYS_FIELD_NUMBER: builtins.int
    FULL_FEATURE_NAMES_FIELD_NUMBER: builtins.int
    STORAGE_FIELD_NUMBER: builtins.int
    FEATURE_SERVICE_NAME_FIELD_NUMBER: builtins.int
    TAGS_FIELD_NUMBER: builtins.int
    name: typing.Text = ...
    """Name of the dataset. Must be unique since it's possible to overwrite dataset by name"""

    project: typing.Text = ...
    """Name of Feast project that this Dataset belongs to."""

    @property
    def features(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """list of feature references with format "<view name>:<feature name>" """
        pass
    @property
    def join_keys(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """entity columns + request columns from all feature views used during retrieval"""
        pass
    full_feature_names: builtins.bool = ...
    """Whether full feature names are used in stored data"""

    @property
    def storage(self) -> global___SavedDatasetStorage: ...
    feature_service_name: typing.Text = ...
    """Optional and only populated if generated from a feature service fetch"""

    @property
    def tags(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """User defined metadata"""
        pass
    def __init__(self,
        *,
        name : typing.Text = ...,
        project : typing.Text = ...,
        features : typing.Optional[typing.Iterable[typing.Text]] = ...,
        join_keys : typing.Optional[typing.Iterable[typing.Text]] = ...,
        full_feature_names : builtins.bool = ...,
        storage : typing.Optional[global___SavedDatasetStorage] = ...,
        feature_service_name : typing.Text = ...,
        tags : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["storage",b"storage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["feature_service_name",b"feature_service_name","features",b"features","full_feature_names",b"full_feature_names","join_keys",b"join_keys","name",b"name","project",b"project","storage",b"storage","tags",b"tags"]) -> None: ...
global___SavedDatasetSpec = SavedDatasetSpec

class SavedDatasetStorage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    FILE_STORAGE_FIELD_NUMBER: builtins.int
    BIGQUERY_STORAGE_FIELD_NUMBER: builtins.int
    REDSHIFT_STORAGE_FIELD_NUMBER: builtins.int
    SNOWFLAKE_STORAGE_FIELD_NUMBER: builtins.int
    TRINO_STORAGE_FIELD_NUMBER: builtins.int
    SPARK_STORAGE_FIELD_NUMBER: builtins.int
    CUSTOM_STORAGE_FIELD_NUMBER: builtins.int
    ATHENA_STORAGE_FIELD_NUMBER: builtins.int
    @property
    def file_storage(self) -> feast.core.DataSource_pb2.DataSource.FileOptions: ...
    @property
    def bigquery_storage(self) -> feast.core.DataSource_pb2.DataSource.BigQueryOptions: ...
    @property
    def redshift_storage(self) -> feast.core.DataSource_pb2.DataSource.RedshiftOptions: ...
    @property
    def snowflake_storage(self) -> feast.core.DataSource_pb2.DataSource.SnowflakeOptions: ...
    @property
    def trino_storage(self) -> feast.core.DataSource_pb2.DataSource.TrinoOptions: ...
    @property
    def spark_storage(self) -> feast.core.DataSource_pb2.DataSource.SparkOptions: ...
    @property
    def custom_storage(self) -> feast.core.DataSource_pb2.DataSource.CustomSourceOptions: ...
    @property
    def athena_storage(self) -> feast.core.DataSource_pb2.DataSource.AthenaOptions: ...
    def __init__(self,
        *,
        file_storage : typing.Optional[feast.core.DataSource_pb2.DataSource.FileOptions] = ...,
        bigquery_storage : typing.Optional[feast.core.DataSource_pb2.DataSource.BigQueryOptions] = ...,
        redshift_storage : typing.Optional[feast.core.DataSource_pb2.DataSource.RedshiftOptions] = ...,
        snowflake_storage : typing.Optional[feast.core.DataSource_pb2.DataSource.SnowflakeOptions] = ...,
        trino_storage : typing.Optional[feast.core.DataSource_pb2.DataSource.TrinoOptions] = ...,
        spark_storage : typing.Optional[feast.core.DataSource_pb2.DataSource.SparkOptions] = ...,
        custom_storage : typing.Optional[feast.core.DataSource_pb2.DataSource.CustomSourceOptions] = ...,
        athena_storage : typing.Optional[feast.core.DataSource_pb2.DataSource.AthenaOptions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["athena_storage",b"athena_storage","bigquery_storage",b"bigquery_storage","custom_storage",b"custom_storage","file_storage",b"file_storage","kind",b"kind","redshift_storage",b"redshift_storage","snowflake_storage",b"snowflake_storage","spark_storage",b"spark_storage","trino_storage",b"trino_storage"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["athena_storage",b"athena_storage","bigquery_storage",b"bigquery_storage","custom_storage",b"custom_storage","file_storage",b"file_storage","kind",b"kind","redshift_storage",b"redshift_storage","snowflake_storage",b"snowflake_storage","spark_storage",b"spark_storage","trino_storage",b"trino_storage"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["kind",b"kind"]) -> typing.Optional[typing_extensions.Literal["file_storage","bigquery_storage","redshift_storage","snowflake_storage","trino_storage","spark_storage","custom_storage","athena_storage"]]: ...
global___SavedDatasetStorage = SavedDatasetStorage

class SavedDatasetMeta(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CREATED_TIMESTAMP_FIELD_NUMBER: builtins.int
    LAST_UPDATED_TIMESTAMP_FIELD_NUMBER: builtins.int
    MIN_EVENT_TIMESTAMP_FIELD_NUMBER: builtins.int
    MAX_EVENT_TIMESTAMP_FIELD_NUMBER: builtins.int
    @property
    def created_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time when this saved dataset is created"""
        pass
    @property
    def last_updated_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Time when this saved dataset is last updated"""
        pass
    @property
    def min_event_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Min timestamp in the dataset (needed for retrieval)"""
        pass
    @property
    def max_event_timestamp(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Max timestamp in the dataset (needed for retrieval)"""
        pass
    def __init__(self,
        *,
        created_timestamp : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        last_updated_timestamp : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        min_event_timestamp : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        max_event_timestamp : typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["created_timestamp",b"created_timestamp","last_updated_timestamp",b"last_updated_timestamp","max_event_timestamp",b"max_event_timestamp","min_event_timestamp",b"min_event_timestamp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["created_timestamp",b"created_timestamp","last_updated_timestamp",b"last_updated_timestamp","max_event_timestamp",b"max_event_timestamp","min_event_timestamp",b"min_event_timestamp"]) -> None: ...
global___SavedDatasetMeta = SavedDatasetMeta

class SavedDataset(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SPEC_FIELD_NUMBER: builtins.int
    META_FIELD_NUMBER: builtins.int
    @property
    def spec(self) -> global___SavedDatasetSpec: ...
    @property
    def meta(self) -> global___SavedDatasetMeta: ...
    def __init__(self,
        *,
        spec : typing.Optional[global___SavedDatasetSpec] = ...,
        meta : typing.Optional[global___SavedDatasetMeta] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["meta",b"meta","spec",b"spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["meta",b"meta","spec",b"spec"]) -> None: ...
global___SavedDataset = SavedDataset
